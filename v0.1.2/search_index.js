var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TEDOPA","category":"page"},{"location":"#TEDOPA","page":"Home","title":"TEDOPA","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TEDOPA is a package for computing the chain mapping of spectral densities of both bosonic and fermionic environments. Starting from the spectral density function, the temperature and the chemical potential (if applicable), it computes the chain coefficients of the TEDOPA-transformed environment, applying a thermalization procedure such as T-TEDOPA or the thermofield transformation.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package must be installed directly from GitHub, as it is not in any public registry. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add \"https://github.com/phaerrax/TEDOPA.jl.git\"","category":"page"},{"location":"#How-to-describe-environments","page":"Home","title":"How to describe environments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Information about an environment (or a collections of environments) must be encoded in a JSON dictionary with the following structure:","category":"page"},{"location":"","page":"Home","title":"Home","text":"{\n    \"environment\": {\n        \"spectral_density_parameters\": [1, 0.5],\n        \"spectral_density_function\": \"1/(10pi) * sqrt((2a[2]-a[1]+x)*(2a[2]+a[1]-x))\",\n        \"domain\": [0, 2],\n        \"temperature\": 0.4,\n        \"chemical_potential\": 0.5\n    },\n    \"chain_length\": 200,\n    \"PolyChaos_nquad\": 5000\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each element of the \"environments\" subdictionary defines an environment as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"\"spectral_density_function\" is a string containing a valid Julia function of the variable x and possibly a set of parameters a[1], a[2], etc.;\n\"spectral_density_parameters\" is a list of numbers that will replace a[1], a[2] and so on in the spectral density function;\n\"domain\" is the domain of the spectral density function;\n\"temperature\" is the temperature of the environment;\n\"chemical_potential\" is the chemical potential of the environment.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are then two additional parameters:","category":"page"},{"location":"","page":"Home","title":"Home","text":"\"chain_length\" specifies the lengths of the resulting chains;\n\"PolyChaos_nquad\" is a parameter for the numerical integration used to calculate the coefficients (usually a higher number means a higher precision).","category":"page"},{"location":"#How-to-compute-the-chain-coefficients","page":"Home","title":"How to compute the chain coefficients","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package offers several ways of computing the chain mapping, all derived from the original TEDOPA algorithm.","category":"page"},{"location":"","page":"Home","title":"Home","text":"chainmapping_tedopa: standard chain mapping of a single environment;\nchainmapping_ttedopa: thermalized chain mapping for bosonic environments;\nchainmapping_tftedopa: single-chain thermalized chain mapping for fermionic environments;\nchainmapping_thermofield: a thermofield transformation and then a chain mapping of the (fermionic) environment; it can also merge multiple multiple environments together (in this case, the \"environment\" subdictionary is replaced by a list of dictionaries, such as in the following example).","category":"page"},{"location":"","page":"Home","title":"Home","text":"{\n    \"environment\": [\n        {\n            \"spectral_density_parameters\": [],\n            \"spectral_density_function\": \"1/(pi*200)\",\n            \"domain\": [-100, 100],\n            \"temperature\": 0,\n            \"chemical_potential\": 0.01\n        },\n        {\n            \"spectral_density_parameters\": [],\n            \"spectral_density_function\": \"1/(pi*200)\",\n            \"domain\": [-100, 100],\n            \"temperature\": 0,\n            \"chemical_potential\": -0.01\n        }\n    ],\n    \"chain_length\": 200,\n    \"PolyChaos_nquad\": 5000\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once you have a properly formatted dictionary in a JSON file, you can call one of the above functions by providing a file object or a string containing the file name; you can also provide the dictionary itself, directly.","category":"page"},{"location":"#Chain-mapping-functions","page":"Home","title":"Chain-mapping functions","text":"","category":"section"},{"location":"#Core-algorithm","page":"Home","title":"Core algorithm","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"chainmapping","category":"page"},{"location":"#TEDOPA.chainmapping","page":"Home","title":"TEDOPA.chainmapping","text":"chainmapping(J::Function, support, L::Int; kwargs...)\n\nCompute the first L coefficients of the chain-map Hamiltonian obtained from the spectral density J defined over support.\n\nArguments\n\nJ::Function: non-negative function defined (at least) on support.\nsupport: support of J; it can be a pair of real numbers, denoting an interval, but can be more generally a list of increasing real numbers [a_1,  a_2, a_3, …, a_N], that will be interpreted as (a_1a_2)  (a_2a_3)     (a_N-1a_N). The subdivision is ignored for the calculation of the chain coefficients, but it can become useful to compute the integral of J over support, since the numerical integration algorithm may need to exclude some intermediate points from the domain to work (e.g. if they are singularities).\nL::Int: number of oscillators in the chain.\nNquad::Int: a parameter passed to OrthoPoly, which determines the number of nodes used for the quadrature method when numerical integration is performed.\n\nKeyword arguments are passed on to the OrthoPoly constructor of the set of orthogonal polynomials.\n\nIt returns the tuple (Ω,κ,η) containing\n\nthe single-site energies Ω,\nthe coupling coefficients κ between oscillators,\nthe coupling coefficient η between the first oscillator and the system.\n\nThe spectral function J is associated to the recursion coefficients αₙ and βₙ which make up the recursion formula x πₙ(x) = πₙ₁(x) + αₙ πₙ(x) + βₙ πₙ₁(x) for the monic orthogonal polynomials πₙ_nin ℕ determined by J. In the formula, π₁ is the null polynomial. The chain coefficients are then given by\n\nΩᵢ = αᵢ, with iin1dotscL,\nκᵢ = sqrtβᵢ₁, with iin1dotscL-1,\n\nwhile η is the integral of J over its support.\n\n\n\n\n\n","category":"function"},{"location":"#TEDOPA-variants","page":"Home","title":"TEDOPA variants","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"chainmapping_tedopa\nchainmapping_ttedopa\nchainmapping_tftedopa\nchainmapping_thermofield","category":"page"},{"location":"#TEDOPA.chainmapping_tedopa","page":"Home","title":"TEDOPA.chainmapping_tedopa","text":"chainmapping_tedopa(file::IOStream)\n\nReturn the frequency and coupling coefficients of the TEDOPA chain obtained by the environment described in the JSON file file.\n\nSee chainmapping_tedopa for more information.\n\n\n\n\n\nchainmapping_tedopa(filename::AbstractString)\n\nReturn the frequency and coupling coefficients of the TEDOPA chain obtained by the environment described in the JSON file called filename.\n\nSee chainmapping_tedopa for more information.\n\n\n\n\n\nchainmapping_tedopa(parameters::Dict{<:AbstractString, Any})\n\nReturn the frequency and coupling coefficients of the TEDOPA chain obtained by the environment specified by the parameters dictionary.\n\nExample\n\njulia> env = Dict(\n    \"domain\" => [0, 2],\n    \"spectral_density_parameters\" => [1, 0.5],\n    \"spectral_density_function\" => \"sqrt((2a[2]-a[1]+x)*(2a[2]+a[1]-x))\",\n);\njulia> p = Dict(\n    \"environment\" => env,\n    \"chain_length\" => 200,\n    \"PolyChaos_nquad\" => 5000,\n);\njulia> chainmapping_tedopa(p)\n(\n    frequencies=[1.0000000000000004, …, 1.000000000000001],\n    couplings=[0.22360679783266632, …, 0.49999999955894253],\n)\n\n\n\n\n\n","category":"function"},{"location":"#TEDOPA.chainmapping_ttedopa","page":"Home","title":"TEDOPA.chainmapping_ttedopa","text":"chainmapping_ttedopa(file::IOStream)\n\nReturn the frequency and coupling coefficients of the TEDOPA chain obtained by the environment described in the JSON file file, after a thermalization procedure.\n\nSee chainmapping_tedopa for more information.\n\n\n\n\n\nchainmapping_ttedopa(filename::AbstractString)\n\nReturn the frequency and coupling coefficients of the TEDOPA chain obtained by the environment described in the JSON file called filename, after a thermalization procedure.\n\nSee chainmapping_tedopa for more information.\n\n\n\n\n\nchainmapping_ttedopa(parameters::Dict{<:AbstractString, Any})\n\nReturn the frequency and coupling coefficients of the TEDOPA chain obtained by the environment specified by the parameters dictionary, after a thermalization procedure.\n\nSee chainmapping_tedopa for more information.\n\n\n\n\n\n","category":"function"},{"location":"#TEDOPA.chainmapping_tftedopa","page":"Home","title":"TEDOPA.chainmapping_tftedopa","text":"chainmapping_tftedopa(file::IOStream)\n\nReturn the frequency and coupling coefficients of the TEDOPA chain obtained by the environment described in the JSON file file, after transforming it into a T=0 and μ=0 environment through the TF-TEDOPA algorithm.\n\nSee chainmapping_tedopa for more information.\n\n\n\n\n\nchainmapping_tftedopa(filename::AbstractString)\n\nReturn the frequency and coupling coefficients of the TEDOPA chain obtained by the environment described in the JSON file called filename, after transforming it into a T=0 and μ=0 environment through the TF-TEDOPA algorithm.\n\nSee chainmapping_tedopa for more information.\n\n\n\n\n\nchainmapping_tftedopa(parameters::Dict{<:AbstractString, Any})\n\nReturn the frequency and coupling coefficients of the TEDOPA chain obtained by the environment specified by the parameters dictionary, after transforming it into a T=0 and μ=0 environment through the TF-TEDOPA algorithm.\n\nSee chainmapping_tedopa for more information.\n\n\n\n\n\n","category":"function"},{"location":"#TEDOPA.chainmapping_thermofield","page":"Home","title":"TEDOPA.chainmapping_thermofield","text":"chainmapping_thermofield(file::IOStream)\n\nReturn the frequency and coupling coefficients of the TEDOPA chain obtained by the environment described in the JSON file file, after transforming it into a T=0 and μ=0 environment through the thermofield procedure.\n\nSee chainmapping_tedopa for more information.\n\n\n\n\n\nchainmapping_thermofield(filename::AbstractString)\n\nReturn the frequency and coupling coefficients of the TEDOPA chain obtained by the environment described in the JSON file called filename, after transforming it into a T=0 and μ=0 environment through the thermofield procedure.\n\nSee chainmapping_tedopa for more information.\n\n\n\n\n\nchainmapping_thermofield(parameters::Dict{<:AbstractString, Any})\n\nReturn the frequency and coupling coefficients of the TEDOPA chain obtained by the environment specified by the parameters dictionary, after transforming it into a T=0 and μ=0 environment through the thermofield procedure.\n\nSee chainmapping_tedopa for more information.\n\n\n\n\n\n","category":"function"}]
}
